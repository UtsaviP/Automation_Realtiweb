<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="4" passed="3" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-01-03T18:46:38Z" name="Surefire suite" finished-at="2023-01-03T18:48:09Z" duration-ms="90594">
    <groups>
      <group name="cucumber">
        <method signature="AbstractTestNGCucumberTests.runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:cucumber.TestNGTestRunner@38afe297]" name="runScenario" class="io.cucumber.testng.AbstractTestNGCucumberTests"/>
      </group> <!-- cucumber -->
    </groups>
    <test started-at="2023-01-03T18:46:38Z" name="Surefire test" finished-at="2023-01-03T18:48:09Z" duration-ms="90594">
      <class name="company.tests.Grammarly1Test">
        <test-method is-config="true" signature="launchApplication()[pri:0, instance:company.tests.Grammarly1Test@7bedc48a]" started-at="2023-01-03T18:46:39Z" name="launchApplication" finished-at="2023-01-03T18:46:48Z" duration-ms="9132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApplication -->
        <test-method signature="GrammarlyTestcase(java.util.HashMap)[pri:0, instance:company.tests.Grammarly1Test@7bedc48a]" started-at="2023-01-03T18:46:48Z" name="GrammarlyTestcase" data-provider="getData" finished-at="2023-01-03T18:46:57Z" duration-ms="9173" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{password=Pass2020#, email=sadikalamin.eee@gmail.com}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GrammarlyTestcase -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:company.tests.Grammarly1Test@7bedc48a]" started-at="2023-01-03T18:46:57Z" name="tearDown" finished-at="2023-01-03T18:47:13Z" duration-ms="16312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- company.tests.Grammarly1Test -->
      <class name="company.tests.Grammarly2Test">
        <test-method is-config="true" signature="launchApplication()[pri:0, instance:company.tests.Grammarly2Test@131ef10]" started-at="2023-01-03T18:47:13Z" name="launchApplication" finished-at="2023-01-03T18:47:21Z" duration-ms="7556" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApplication -->
        <test-method signature="PositiveTestcase(java.util.HashMap)[pri:0, instance:company.tests.Grammarly2Test@131ef10]" started-at="2023-01-03T18:47:21Z" name="PositiveTestcase" data-provider="getData" finished-at="2023-01-03T18:47:40Z" duration-ms="18953" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{password=Pass2020#, email=sadikalamin.eee@gmail.com}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PositiveTestcase -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:company.tests.Grammarly2Test@131ef10]" started-at="2023-01-03T18:47:40Z" name="tearDown" finished-at="2023-01-03T18:47:40Z" duration-ms="128" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- company.tests.Grammarly2Test -->
      <class name="company.tests.Grammarly3Test">
        <test-method is-config="true" signature="launchApplication()[pri:0, instance:company.tests.Grammarly3Test@55b0dcab]" started-at="2023-01-03T18:47:40Z" name="launchApplication" finished-at="2023-01-03T18:47:48Z" duration-ms="7920" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApplication -->
        <test-method signature="NegativeTestcase(java.util.HashMap)[pri:0, instance:company.tests.Grammarly3Test@55b0dcab]" started-at="2023-01-03T18:47:48Z" name="NegativeTestcase" data-provider="getData" finished-at="2023-01-03T18:48:08Z" duration-ms="20129" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{password=Pass2020#, email=sadikalamin.eee@gmail.com}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NegativeTestcase -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:company.tests.Grammarly3Test@55b0dcab]" started-at="2023-01-03T18:48:08Z" name="tearDown" finished-at="2023-01-03T18:48:08Z" duration-ms="131" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- company.tests.Grammarly3Test -->
      <class name="cucumber.TestNGTestRunner">
        <test-method is-config="true" signature="setUpClass(org.testng.ITestContext)[pri:0, instance:cucumber.TestNGTestRunner@38afe297]" started-at="2023-01-03T18:48:08Z" name="setUpClass" finished-at="2023-01-03T18:48:09Z" duration-ms="790" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@404ced67]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:cucumber.TestNGTestRunner@38afe297]" started-at="2023-01-03T18:48:09Z" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2023-01-03T18:48:09Z" duration-ms="114" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Positive Test of Submitting the order"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Purchase the order from Ecommerce Website"]]>
              </value>
            </param>
          </params>
          <exception class="io.cucumber.testng.UndefinedStepException">
            <message>
              <![CDATA[The step 'I landed on Ecommerce Page' is undefined.
You can implement this step using the snippet(s) below:

@Given("I landed on Ecommerce Page")
public void i_landed_on_ecommerce_page() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.cucumber.testng.UndefinedStepException: The step 'I landed on Ecommerce Page' is undefined.
You can implement this step using the snippet(s) below:

@Given("I landed on Ecommerce Page")
public void i_landed_on_ecommerce_page() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
at io.cucumber.testng.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:23)
at io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$1(TestNGCucumberRunner.java:133)
at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:129)
at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:129)
at io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:129)
at io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:35)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- io.cucumber.testng.UndefinedStepException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method is-config="true" signature="tearDownClass()[pri:0, instance:cucumber.TestNGTestRunner@38afe297]" started-at="2023-01-03T18:48:09Z" name="tearDownClass" finished-at="2023-01-03T18:48:09Z" duration-ms="52" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- cucumber.TestNGTestRunner -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
